-- Some suggestions and questions after looking into script
/*
1. Please add comments explaining why you chose these tables, similar to documentation. When starting to create a new database, it's usually better to write comments for tables and attributes. This helps anyone looking at your script to understand more clearly what you intend to create.
    -- Doc
3. When naming, use either upper case or lower case consistently. For example, FK_appointments_TO_services is not the correct way to write it. The script will be more readable if you use one style. Usually, Oracle functions are written in upper case, while attributes are written in lower case.
    -- Noted
2. Can you explain why you need this check?
      appointment_cancelled NUMBER(1) DEFAULT 0 CHECK (appointment_cancelled IN (0, 1)) NOT NULL, -- 'CHECK (appointment_cancelled IN (0, 1))' checks if the number is 1 or 0,  if the appointment was cancelled:  1 - True, 0 - False, if no values are inserted it inserts Default - 0 (Not cancelled)
      -- it is needed for data integrity, so that other values are not allowed to be entered.
      -- 05-11 changed it to char values Y/N more logical and easier to read

3. I see you use the type VARCHAR2(200). There are two ways to write VARCHAR2. 
   Can you check and explain the differences between them and which one is better to use?
    -- Cool! i didnt know till now that you can (and probably must) specify if you want to use bytes or full characters which could be more then 1 byte.
    -- So there are 2 options (byte is default if not specified which is important) "VARCHAR2(200 byte)" and "VARCHAR2(200 char)". 
    -- Byte is used for English, numbers and other single byte symbols, char is not always 1 byte for example certain language words store up to 4 bytes in a single letter.
    -- In another words "Byte" stores certain amount of bytes regardless of how many characters it represents, "Char" stores specified number of characters regardless of how many bytes it has. 

4. For better understanding of tables, I suggest adding comments to the attributes.
   Can you edit your script?
    -- documentation filled and the same comments now in tables themselves

5. I see that you use NOT NULL everywhere. Is it really necessary? For some attributes, you might not need to use it.
   Can you review and make changes where you think it is not necessary? If it is necessary can you explain why you think that?
    -- You're right i am being overly restrictive using not null everywhere, some columns could be left empty and is not mandatory to fill in the data. 
    

6. It will be greate that you creation order end with appointments table, because when you create table or objects ussually start from object which unique and do not have foreign key, it is like primary table and this way is more readable.
    -- Done

7. Also, you need to add audit columns. This makes it easier to check changes. But not for all tables. In this part you also can create triggers.
    -- Working on it, figuring out triggers need more time

8. For this table suggest to add email column to customers table.
    -- Done

9. For DB you can also add one more object for automatic message info, in which person is getting information of his appointment.
    -- Done
10. For pets table I suggest to add one more collumn "description". Because if there specific info about pet that are groomer have to know costumer can add it.
    -- Done
11. Create another table for groomers working calendors.
    -- Done
12. For sequences, I suggest using more understandable names, rather than short ones.
    -- Done
13. For table Identification suggest to use "table name" + _id, this way easer to see for which table it is, because in some tables of yours is different from table name.
    -- Done
14. For the diagram, not all relationships are added.
    -- Should be better now
*/
----------------------------------------------------------------------------------------------------------------------------------------------------------
1. I can see that you understand the difference between CHAR and BYTE. However, I recommend using the CHAR type. 
Since we typically use Unicode (UTF-8) as the standard in programming, CHAR is a safer and more predictable choice in that context.
    -- I have replace all of them with char.

2. I just wanted to check if you understood why I suggested using the COMMENT function for columns and tables. 
Because sometimes the documentation does not provide enough detail about what is actually stored in the tables. 
In your case, the descriptions are a bit general.
So when I try to figure out what data you are storing, it gets a bit confusing.  
For example, groomer table - what do you want to save in STATUS column.
    -- Comments have been expanded with more information.

    /*
    Regarding the comments, we’ll leave them as they are for now. However, it seems there’s a misunderstanding about the difference between table and column comments.
    A table comment is meant to describe the overall purpose or content of the entire table. It should not include details about individual columns.
    On the other hand, a column comment is more useful for explaining the meaning, format, or constraints of specific fields within the table.
    And still you do not answer about this part - /*For example, groomer table - what do you want to save in STATUS column.*/
    And I can see one column with the same name is groomer_status in two different tables, is it the same info saved in them?
    */
    
        -- I forgot to remove groomer_status from groomer_schedule table now its removed, left it on groomer table. 
        -- The column stores status about the groomer "Available", "Unavailable", "On Vacation", etc..

3. CREATED_BY and CREATED_DATE should always be set as NOT NULL. When you insert the first record, the system should automatically save who created it and when. 
That is usually handled by an insert trigger. -- I have changed it.
If, for some reason, the trigger does not work, you will get an error because those fields can not be null.
Also do not use default values to audit attributes, for that is created triggers. Also default values are used for NOT NULL values.
    --QUESTION Im not sure if i completely understood, so i should not set a defaut values for the audit columns and rely on the triggers only?
    -- Also i was thinking about exception handling for triggers, but im not sure if they are neccessary in this case.  
        /*
         For audit columns, you don’t need to set default values, as this is handled by the trigger. That’s exactly what triggers are designed for.
        In the case you’re working on, there’s no need to add an exception to the trigger—unless you have a specific reason or requirement for it.
        It really depends on what you intend to include in the exception section.
        */
            -- Yes, just as i thought, your initial comment was a bit unclear and i thought why would i need to set them as default, now its clear :D

4. I noticed you like using the STATUS attribute a lot — do you think it might be possible to use a more specific name for it? 
That could help make things a bit clearer when reading the code or working with the data.
    -- I have removed status column for notification table since its a bit useless to check if notification was sent or not when there is notification_sent column which clearly shows that
    -- also changed the name to 'groomer_status' in groomer table.

5. I took a look at the triggers. When you are using the INSERT method, you should not include this syntax because it is meant for the UPDATE part:
:NEW.last_updated_by := USER;
:NEW.last_update := SYSDATE;
When a record is added for the first time, those columns are supposed to be empty. They are meant to be filled in only when the record is updated later.
    -- Now its fixed.

6. About ER diagram.
if I understand correctly, can one appointment have only one payment method? If that is the case, then the relationship should be one-to-one, not one-to-many.
It is the same with appoinment_notification and appoinments.
    /* 
    (appointment_notification and appointments) - Changed it
    QUESTION (appointment and payment) But if the customer changes his mind after paying for his initial appointment and needs another service while being at the salon,
    so when he pays second time it counts as the same appointment, so it can be one to many relationship or not?
    */

        /*
        Looking at it from the appointment perspective, there can be a one-to-many relationship between appointments and payments — meaning one appointment can have multiple payments.
        However, I just noticed that the current structure of the groomer_schedule table is not correct. It should be associated with the services table, because a customer creates an appointment based on the available services and groomer time.
        For example, if I want to book only a haircut for my pet, I should be able to view the groomer's schedule along with the specific services they offer. Based on that, I can choose a time slot and create an appointment.
        
        groomer_schedule → services: Many-to-One
        (Each schedule entry is linked to a specific service)
        
        appointment → groomer_schedule: Many-to-One
        (Each appointment references a specific schedule entry)
        
        This way, the system allows customers to:
            View available time slots and services.
            Select a service and time.
            Create an appointment based on that selection.
        */
            -- Understood and also i have added the relationship you mentioned.

7. I would recommend taking a look at how uniqueness can be defined in a table. It’s a good way to make sure certain values like IDs or emails do not get duplicated when they should not.
A primary key (which is always unique and not null) which one you use and another one which i did not see in your code is a unique constraint which can be on one or more columns.

    -- Im not sure if i am correct, but those i have written should be the main ones for this model, they need to be checked if im in the right direction.

Now, I would like you to create some scenarios you can use to practice working with data using CRUD operations. Once you are comfortable with CRUD, you can move on to writing simple functions and procedures.
    /* My initial thought is to write some basic crud operations inserting/updating data
    into the tables and later on generating lets say 20-30 rows for each table with AI
    and then focusing on coding procedures and so on.
    */
        /*
        For CRUD I suggest to write for yourself some scripts to remmember syntax. Also to have more time to look into it because where are diferent types you can use it. Just not only simple ones.
        
        About unique constrains when not to use it on a foreign key. If the relationship is one-to-many, then you should not use a unique constraint.
        For your appointment_service table I suggest not use unique constrain because you have already added foreign key which ensures that:
        Each appointment can have multiple services.
        Each service can be used in multiple appointments.
        But the same service cannot be added twice to the same appointment.

        I also noticed that in the appointment table, you're using the appointment_date column. However, this might be unnecessary because the appointment is linked to the groomer's schedule, from which the date can be derived.
        /*
            -- I have removed appointment_date

